# -*- coding: utf-8 -*-
"""python_18_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGDwDDYiwhRqwjZRkQiLUURTMG0acb8W

클래스(Class)
"""

#클래스 정의(빵 굽는 틀)

class Car:
    color = "" #속성(필드) 초기화
    speed = 0

    #메소드(기능)정의

    def speedUp(self, value):
        self.speed += value

    def speedDown(self, value):
        self.speed -= value

#인스턴스(instance)

myCar1 = Car()
myCar1.color = 'Red'
myCar1.speed = 0

myCar2 = Car()
myCar2.color = 'Blue'
myCar2.speed = 0

myCar3 = Car()
myCar3.color = 'Green'
myCar3.speed = 0

myCar1.speedUp(30)
print("나의 첫번째 차 색상은 %s이며 현재 속도는 %d km/h 입니다."%(myCar1.color, myCar1.speed))

myCar1.speedUp(50)
print("나의 첫번째 차 색상은 %s이며 현재 속도는 %d km/h 입니다."%(myCar1.color, myCar1.speed))

myCar1.speedDown(60)
print("나의 첫번째 차 색상은 %s이며 현재 속도는 %d km/h 입니다."%(myCar1.color, myCar1.speed))

myCar2.speedUp(50)
print("나의 첫번째 차 색상은 %s이며 현재 속도는 %d km/h 입니다."%(myCar2.color, myCar2.speed))

"""2. 생성자"""

class Car:
    color = ''
    speed = 0

    #생성자
    def __init__(self):
        self.color ='white'
        self.speed = 0

    #메소드(기능)정의
    def speedUp(self, value):
        self.speed += value

    def speedDown(self, value):
        self.speed -= value

"""매개변수가 있는 생성자"""

#클래스 정의

class Car:
    color = ""
    speed = 0

    #생성자(매개변수 존재)
    def __init__ (self, value1, value2):
        self.color = value1
        self.speed = value2
    #메소드(기능)정의
    def speedUp(self, value):
        self.speed += value
    def speedDown(self, value):
        self.speed -= value

k8 = Car("Black", 30)
benz = Car("Black", 60)

print("k8의 색상은 %s이며 현재 속도는 %d km/h 입니다."%(k8.color, k8.speed))
print("benz의 색상은 %s이며 현재 속도는 %d km/h 입니다."%(benz.color, benz.speed))

"""인스턴스 변수와 클래스 변수

1. 클래스 변수와 인스턴스 변수 구별 하는 법

-self 붙으면 >> instance변수

-class 붙으면 >> class 변수

2. 클래스, 인스턴스 변수 접근

-인스턴스 변수 접근: instancem.instacne변수

-클래스 변수 접근: instance.class변수, class.class변수
"""

#클래스 정의

class Car():
    speed = 0 #인스턴스 변수
    count = 0 #클래스 변수

    #생성자
    def __init__(self,speed):
        self.speed = speed
        Car.count += 1

a = Car(30)
print("a의 현재 속도는 %d km/h, 생산된 자동차는 총 %d 대 입니다."%(a.speed, a.count) )

"""클래스의 상속"""

#메소드의 오버라이딩 구현

#super class(부모 클래스) 선언

class Car():
    speed = 0 #인스턴스 변수 (속성)

    #메소드(기능)구현
    def speedUp(self,value):
        self.speed += value
        print("현재 속도는(super class):%d"%self.speed)

#sub class(자식 클래스) 선언

class Sedan(Car):
    def speedUp(self, value):
        self.speed += value

        if self.speed >= 110:
            self.speed = 100
        print("현재 속도는(서브클래스):%d"%self.speed)

class Truck(Car):
    pass

#메소드의 오버라이딩 구현

#super class(부모 클래스) 선언

class Car():
    speed = 0 #인스턴스 변수 (속성)

    #메소드(기능)구현
    def speedUp(self,value):
        self.speed += value
        print("현재 속도는(super class):%d"%self.speed)

#sub class (자식클래스)선언

class Sedan(Car):
    seat = 0

    def getSeat(self, value):
        self.seat += value
        print("현재 좌석수:%d"%self.seat)

    def speedUp(self, value):
        self.speed += value

        if self.speed >= 110:
            self.speed = 100
        print("현재 속도는(서브클래스):%d"%self.speed)

class Truck(Car):
    load= 0 #적재량

    #적재량을 알아보는 기능(메소드)

    def getLoad(self, value):
        self.load += value
        print("현재 적재량은: %d"%self.load)


#인스턴스 생성
a = Truck()
b = Sedan()

print("a:")
a.speedUp(50)
a.getLoad(300)

print("b:")
b.speedUp(150)
b.getSeat(4)

