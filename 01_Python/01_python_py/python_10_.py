# -*- coding: utf-8 -*-
"""python_10_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WhftyIQ9-Fq2xtUjpw_P_2udJhvmAzq8

주석
"""

print("hello")

#한 줄 주석 처리

# print("mulcam")

#여러 줄 주석 처리
'''
하이
'''
print("이해했죠? 111예")

"""원시 데이터 타입
* integer, float, string, boolean
"""

num_int = 30
print(num_int)
print(type(num_int))

"""사칙 연산"""

x = 6
y = 3

result = x+y
print(result)

print(x-y)
print(x*y)
print(x/y)

print(x//y) #몫
print(x%y) #나머지

"""조건 연산자"""

x =418
y =430

print(x == y)
print(x != y)
print(x > y)
print(x < y)
print(x <= y)
print(x >= y)

#사용자에게 입력받기

입력 = input("임의의 숫자를 입력하세요:") #문자를 입력받음
print(입력)
print(type(입력)) #형 변환 필요함
입력_2 = int(입력)
print(입력)
print(type(입력_2))

#입력값은 문자 >> 형변환 해준다
x = int(input("아무 숫자를 입력하세요:"))
y = int(input("아무 숫자를 입력하세요:"))

print(x,y)
print(type(x))
print(type(y))

result = x+y
print(result)

#논리 연산자

True or False

(3>2) or (2>3)

"""String - 1.덧셈, 곱셈 연산자, 인덱싱, 슬라이싱"""

a = "boy"
b = "loves"
c = "girl"

letter = a + " " + b + " " + c + " forever"
print(letter)



#indexing 특정 값을 가져옴
x = "안녕하세요"
lyrics = x * 5
print(lyrics)
print(x[0])
print(x[-5:])

print(lyrics[:5])

이메일 = "drwill@naver.com"
print(이메일[:5])
print(이메일[:5])
print(이메일[-9:-4])

#전화번호 추출

tel = '010-5123-7890'
주소 = '서울시 강남구 대치3동 멀티캠퍼스 옆 PC방'

print(tel[4:8])
print(주소[4:7])
print(주소[8:12])

전처리전_주소 = "   서울시 강남구 선릉역 1번 출구      "
print(전처리전_주소)

#전처리
print(전처리전_주소.strip()) #빈공간 없애기

전처리한주소 = 전처리전_주소.strip()
print(전처리한주소)

#이 주소로 갈려면 지하철 무슨 역에서 내려야 하나요?

print(전처리한주소[-9:-6])

# index 와 find 차이
'''
1. index()
- 문자열, 리스트, 튜플 다 사용 가능
- 찾고자 하는 값이 존재하면 그 위치의 index 반환
- 단, 찾는 값이 없으면 >> 에러 발생(value error)

2. find 문자열에 사용
- 주로 문자열 사용
- 찾고자 하는 값이 존재하면 그 위치의 index 반환
- 찾고자 하는 값이 없으면 >> '-1' 반환
- 문자열 검색시, 예외처리가 필요없다는 장점
'''

"""문자열 수정"""

greeting = "Hello, everyone"

'h' + greeting[1:]

new_greeting = 'h' + greeting[1:]
print(new_greeting)

greeting.lower()

#대문자로 전환, 소문자로 전환

greeting.lower()
greeting.upper()

greeting_upper = greeting.upper()
print(greeting_upper)
print(greeting_upper.title())

#replace (대체하다)

greeting.upper()
greeting.upper().replace("HELLO","방가르~")

#spilt(sep:" ") ""기준으로 나누다
greeting_replace = greeting_upper.replace("HELLO","방가르~")

greeting_replace.split(sep=",")

words = greeting_replace.split(sep=",")
print(words)
print(type(words))

from collections.abc import Sequence
#시퀀스 : 데이터 순서가 있음(인덱싱, 슬라이싱)

my_num = 100
my_string = "hello"
my_list = [1,2,3]


isinstance(my_list, Sequence)
#주어진 객체가 시퀀스인지 확인하는 코드

print(isinstance(my_num, Sequence))
print(isinstance(my_string, Sequence))
print(isinstance(my_list, Sequence))

"""indexing과 slicing"""

a = [400,300,200]
print(a[-2])

"""중첩리스트"""

my_list = [1,2,["variety","is","the","spice","of","life"], 4, 5]
print(my_list)

my_list[2]

my_list[2][3:]

"""List의 주요 메서드"""

#append() 와 extend()

#append : 리스트 끝에 새로운 값을 입력
#리스트나 다른 자료형 요소 추가 가능 ㅇ
#예를 들면, 추가된 리스트는 리스트의 한 요소가 됨
txt = ["I","like"]
고백 = txt.append("your smile")
print(고백)

txt

my_list = [1,2,3]
my_list.append(4) #숫자 한개
my_list

my_list.append([5,6]) #중첩 리스트 추가 가능
print(my_list)

#extend : 리스트에 다른 리스트의 모든 요소 추가 >> 리스트 확장
#다른 리스트의 요소를 그대로 추가해서 기존 리스트를 확장
#한 리스트에 합침
txt = ["Do","you"]
txt.extend(["like","coffee","?"])
txt

my_list = [1,2,3]
another_list = [4,5,6]
my_list.extend(another_list)
print(my_list)

my_list = [1,2,3]
another_list = [4,5,6]
my_list.append(another_list)
print(my_list)

#insert

nums = [0,1,3,4]
nums.insert(2,2)
nums

letter = ["you","are","my","love"]
letter[3] = "everything" #indexing 활용, 값 변경
print(letter)

letter = ["you","are","my","love"]
letter.remove("are")
print(letter)

nums = [3,1,20,5,6]
nums.sort()
nums

nums = [3,1,20,5,6]
nums.sort(reverse=True) #역순 정렬 옵션 사용 dafault : 오름차순
nums

"""tuple 튜플"""

my_tuple = ("하이",1,3.14) # 변경 불가
print(my_tuple)
print(type(my_tuple))

my_tuple = ("Hi",[1,2,3],(3.14, 1.35, 4.26)) #순서 있음

print(my_tuple[2])
print(my_tuple[2][1])

my_list = ["Hi", 1, 3.14]
my_list[0] = 0 #list 값 변경 indexing 활용
print(my_list)

del my_list[2] #리스트에서 특정 값 제거(indexing 활용)
print(my_list)

my_tuple = ("Hi", 1, 3.14)
#my_tuple[0] = 0
#TypeError: 'tuple' object does not support item assignment
# >>tuple은 imutable 변경 불가능

# del my_tuple[0]
# TypeError: 'tuple' object doesn't support item deletion
# >>tuple은 imutable 변경 불가능

my_tuple = ("Love", "Love","Love", "Love", "Hate", "Love", "Love")
print(my_tuple)
print(my_tuple.count("Love"))
print(my_tuple.index("Hate")) #특정 값의 위치 정보(index) 반환

"""딕셔너리 Dictionary"""

my_dict = {'name' : 'will',
           'age':20,
           'shopping': [1,2,3]
           }
print(my_dict)
print(type(my_dict))

your_dict = \ #개행문자
{'name' : 'will',
 'age':20,
 'shopping': [1,2,3]
           }
print(your_dict)

print(my_dict)
print(my_dict['age'])

my_dict['county'] = '대한민국' #새로운 데이터 추가 key 생성

print(my_dict)

#값 변경
my_dict['shopping'] = '가방'
print(my_dict)

print(my_dict.keys())

list(my_dict.keys())

key_list = list(my_dict.keys())
print(key_list)

print(my_dict.values())

value_list =list(my_dict.values())
print(value_list)

print(my_dict.items())
list(my_dict.items())

items_list = list(my_dict.items())

for k, v, in items_list:
    print(k,v)

a = 31
b = 31

if a > b:
    print("a가 b보다 크거나 같다")
elif a ==b:
    print("a가 b와 값이 같다")
else:
    print("a가 b보다 작다")

txt = "I don't care, please let me go"

if "let" in txt:
    print("let 글자 존재")
else:
    print("let 글자 존재하지 않음")

""" 반복문"""

#for loop
#반복문 사용 이유: 효율성!

range(10)
print(list(range(10)))

for i in range(10):
    print(i)

for i in range(10):
    print(str(i) + "번째 hi")

for i in range(1,11):
    print(str(i) + "번째 hi")

my_list = [10,20,30]

for i in my_list:
    print(i)

my_list = [10,20,30]

for i in my_list:
    print(i)

else:
    print("반복문은 완전 종료~")

#enumerate
#반복 가능한(iterable) 객체 (리스트, 튜플, 문자열) 입력으로 받아서
#인덱스(index)와 해당 요소를  포함하는 내용 >> 반복문
'''
for index, value in enumerate(반복가능한 객체):
    처리할 작업 코드
 '''

fruits = ['사과','배','체리','딸기']

for i, fruit in enumerate(fruits):
    print(f'인덱스{i}에 있는 과일 : {fruit}')

#f'' : f string :format 문자열

#소화가 잘되는 과제
#한국-태국전 라인업 보시고 리스트 생성후, enumerate 사용해서
#한국 축구대표팀 라인업 명단을 만들어 보세여!

korea_team = ['정우영','조규성','주민규','백승호','손흥민',
              '송민규','이강인','이재성','정호연','홍현석',
              '황인범','권경원','김문환','김민재','김영권',
              '김진수','박진섭','설영우','이명재','조유민',
              '송범근','이창근','조현우']

print("한국 축구대표팀 라인업")
print()

for i, player in enumerate(korea_team):
    print(f'{i+1}번째 선수: {player} 선수')

team_korea = ['손흥민','조현우','이강인','김민재','정우영','백승호']

for i , player in enumerate(team_korea):
    print(f'국가대표 축구선수 팀 {i+1}번 선수는 {player}입니다.')

"""zip 함수

-두 개 이상의 반복 가능한(iterable) 객체(리스트, 튜플,문자열)을 [병렬]로 묶어주는 함수

-각각의 반복 가능한 객체에서 같은 index요소들을 묶어서 튜플로 만들어 주는 역할
"""

'''
zip(반복가능한 객체1, 반복가능한 객체2)
'''

names = ['양진욱','박민석','예동완','김지우','박소현','김선규','성수린']
ages = [20,21,22,23,24,25,26]
heights = [177,178,179,180,181,182,183]

for name, age, height in zip(names,ages,heights):
    print(f'{name}의 나이는{age}살이고 키는{height}cm입니다')

#실생활 응용무제

#단가
prices = [1, 2, 3.4, 2.5]


#판매량
total_sales = [100,80,90]

for sales, price in zip(total_sales, prices):
    revenue = sales * price
    print(f'매출액 : {revenue}')

"""while loop"""

for i in range(3):
    print(i)

#for 문 차이

'''
while True:
    print("무한반복")

반복문을 멈출려면 정지조건이 있어야한다.
'''

i = 1

while i <=10: #정지조건 (i <=10 )
    print(i)
    i += 1

i = 1

while i <=10: #정지조건 (i <=10 )
    print(str(i) + " 번째 손님 ")
    i += 1

"""사용자 정의 함수"""

'''
def 함수명(매개변수1, 매개변수2...)
    #처리할 코드 입력
    return

'''

def add(num1, num2):
    result = num1 + num2
    return result

add(1,2)

a =20
b = 30

temp = add(a,b)
print(temp)

def addition(num1, num2):
    result = num1 + num2
    print(result)

a =20
b =40

print(addition(a,b))

def plus(num1, num2, num3=None, num4=0):
    result = num1 + num2
    print(result)

a = 20
b = 40

print(plus(a,b))





