# -*- coding: utf-8 -*-
"""python_09_function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c2uHlA6ws6jEuk0SUwOkmH-Bc4Rx9cMz
"""

#define >> 함수를 정의

'''
def 함수이름():
    처리해야할 코드
'''

#안녕하세요 라고 인사하는 함수

def hello():
    print("안녕하세요")

#호출
hello()

def 사랑증빙():
    print("사랑해")

사랑증빙()

#반복문으로 여러 번 호출

for i in range(5):
    hello()

def thankyou():
    print("감사합니다")

count = 0

while count < 10:
    thankyou()
    count = count + 1

count = 0

while count < 10:
    thankyou()
    count = count + 1
    if count == 8:
        break;

"""매개변수가 있는 함수 정의"""

def hello(name):
    print(name + '님')

#호출
hello('이예진')

#매개변수가 있는 함수 반복

for i in ['예진','지훈','성욱']:
    hello(i)

#반환값(return)이 있는 함수

def add_number():
    number = 1 + 1
    return number

add_number()

#매개변수와 반환값이 있는 함수(일반적)
def add_number(a,b):
    number = a + b
    return number

add_number(1,2)

y = add_number(1,2)
print(y)

"""추가 학습"""

#합, 길이 구하기

my_tuple = 3,1,2,4

print(my_tuple)

print(sum(my_tuple))

print(len(my_tuple))

my_list = [10,20,30,40,50]

var1 = sum(my_list)
var2 = len(my_list) #원소의 개수 >> n

avg = var1 / var2 #평균값 구하기
print(var1)
print(var2)
print(avg)

"""함수 def()"""

#사용자 정의 함수
def plus(a,b):
    return a+b

print(plus(2,3))

def plus_print(a, b):
    print(a+b)

print(plus_print(3, 4))

#cf비교 : return값 있는 것은?

def times_return(a,b):
    return a*b
    #return(반환) 메모리 공간에 저장되어 있는 a*b를 반환하라는 의미

print(times_return(3, 4))

"""메소드(method)"""

my_list = [5,4,3,2,1]

my_list.append(50)
#원소를 추가하는 메소드(리스트 뒤에 추가된 값이 붙게 함 )
print(my_list)

my_list.sort() #.sort() 정렬 메소드
print(my_list)

my_dict = {"one" : 1, "two" : 2, "three" : 3}

my_dict.keys()

my_dict.values()

"""인자와 매개변수"""

def plusDouble(a, b): #a,b 매개변수
    return 2*(a+b)

print(plusDouble(3,4) ) # 3,4 는 '인자'

#solve라는 함수를 정의! a와b라는 매개변수를 갖고 있다

def solve(a,b):
    return a+b

print(solve(1,2))

#n 명의 학생의 이름과 점수를 입력받는 함수

def get_students(n):
    students = {}

    for i in range(n):
        name = input()
        score = int(input())
        students[name] = score # dict에 key 값으로 새로운 score 추가

    return students

#학생의 이름과 점수를 받는 것을 바탕으로 학점 매김

def get_grade(score):
    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 80:
        return "C"
    elif score >= 80:
        return "D"
    else:
        return "F"

n = int(input())
students = get_students(n) #get_students(n) 함수에 있는 students 이다.

for student_name in students.keys():
    print(student_name + ":" + get_grade(students[student_name]))

