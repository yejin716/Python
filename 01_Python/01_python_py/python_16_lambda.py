# -*- coding: utf-8 -*-
"""python_16_lambda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DxPcPKmbwFpbGIaMYzHOAVq9V9xjUgNp

1.사용자 정의 함수
"""

def plus(v1,v2):
    result = 0
    result = v1 + v2
    return result

#전역변수 선언

sum = 0

print(plus(100,200))

sum = plus(100,200)
print("plus()함수의 결과는 %d " %sum)

def calc(v1,v2,op):
    result = 0
    if op == '+':
        result = v1 +v2
    elif op == '-':
        result = v1 - v2
    elif op == '*':
        result = v1 * v2
    elif op == '/':
        result = v1 / v2

    return result



res = 0 #전역변수
var1, var2, oper = 0, 0, ""

oper = input("사칙연산을 입력하세여: ")
var1 = int(input('첫번째 숫자 입력: '))
var2 = int(input('두번째 숫자 입력: '))

res = calc(var1,var2,oper)
print("%d %s %d = %d"%(var1, oper, var2, res))
# print(f'{var1} {oper} {var2} = {res}')

def f1():
    a= 10 #지역변수
    print("함수1에서 a 값: %d" %a)

def f2():
    print("함수2에서 a 값: %d" %a)

a= 30 #전역변수

f1()

f2()

def f3():
  b =10
  print("함수3에서 b 값: %d" %b)

def f4():

  print("함수3에서 b 값: %d" %b)

#global
def f3():
  global b #global >> b를 지역, 전역변수로 다 쓰인다.
  b = 10
  print("함수3에서 b 값: %d" %b)

def f4():

  print("함수3에서 b 값: %d" %b)

f3()

f4()

def f5():
    a = 10
    print("함수5에서 a 값: %d" %a)


def f6():
    print("함수6에서 a 값: %d" %a)

a = 20

#반환값이 없는 함수

def f7():
    result = 100
    return result


def f8():
    print("반환값이 없다")


sum = 0
sum = f7()
print('f7()에서 반환한 값: %d'%sum)

f8()

#반환값이 여러 개(2개 이상)인 함수

def f9(v1, v2):
    list = []
    result1 = v1 + v2
    result2 = v1 - v2

    list.append(result1)
    list.append(result2)

    return list

mylist = []

sum, sub = 0, 0

mylist = f9(100,200)
# print(mylist) 결과 : [300, -100]

sum = mylist[0]
sub = mylist[1]

# print(sum) 300
# print(sub) -100

print('f9에서 반환한 값: %d, %d'%(sum, sub))

dict_ = {7:'son', 777:'yejin',8:'lee'}
print(dict_[7])
print(dict_.keys())
print(list(dict_.keys()))

def dict_func(**para):
    for k in para.keys():
        print("%s는 %d 명의 걸그룹이예요"%(k, para[k]))

dict_func(르세라핌=4, 뉴진스=5)

"""람다함수(lambda함수) 익명함수

*익명함수(이름없는 함수):함수의 단축형
"""

def f(x,y):
    return x * y


print(f(10,3))

#람다함수

f1 = lambda x : x+2
print(f1(2))

f2 = lambda x, y : x*y
print(f2(1,2))

#매개변수에 기본값(default)설정

f3 = lambda x=10, y=20 : x+y
f3()

print(f3(100,200))

"""람다함수 map()함수"""

list_1 = [1,2,3,4]
add10 = lambda n : n+ 10

# print(add10(list_1))
# TypeError: can only concatenate list (not "int") to list
print(add10(list_1[0])) #int
print(add10(list_1[2])) #int

print(list(map(add10, list_1)))

list_1 = [1,2,3,4]
list_2 = [11,12,13,14,15]

add = lambda n1, n2 :n1+ n2

list(map(add, list_1, list_2))

#재귀함수 : 자기 자신을 호출하는 함수

def count(n):
    if n >= 1 :
        print(n, end=' ')
        count(n-1)

    else:
        return

print(count(20))

count(1)

#팩토리얼(factorial) 값 구하는 함수

def factorial(n):
    if n <= 1:
        return n
    else:
        return n*factorial(n-1)

print(factorial(4))

#평균과 평점을 출력하는 grade() 사용자 정의 함수 만들기

def grade(*scores):
    score_sum = 0 #초기화
    score_list = []

    for score in scores:
        score_sum += score

    score_avg = score_sum / len(scores)

    if score_avg >= 90:
        grade = 'A'
    elif score_avg >= 80:
        grade = 'B'
    elif score_avg >= 70:
        grade = 'C'
    elif score_avg >= 60:
        grade = 'D'
    else:
        grade = 'F'

    score_list.append(score_avg)
    score_list.append(grade)

    return score_list

print(grade(85,95,70,60))

# adsp 3과목, 정보처리기사 5과목있어요
# 자, 전체 평균 60점 이상이면 합격, 과목당 40점 미만 불합격
# 전체 60점 이상이여도 한 과목이라도 40점이면 불합격(과락)
# 코드 짜 보세요
# 출력물: 전체 평균 점수, 과목당 점수, 합격여부

def grade(*scores):
    score_sum = 0
    score_list = []
    grade = ''

    for score in scores:
      if score <= 40:
          grade = '불합격'

      score_sum += score

    score_avg = round(score_sum / len(scores),2)

    if score_avg >= 60 and grade != '불합격':
        grade = '합격'
    else:
        grade = '불합격'

    score_list.append(score_avg)
    score_list.append(scores)
    score_list.append(grade)

    return score_list

input_scores = []

for i in range(1,6):
    input_scores.append(int(input('점수를 입력하세요 : ')))

list_ = grade(*input_scores)

print('평균점수: %.2f'%list_[0])
print(f'과목점수: {list_[1]}')
print('합격여부: %s'%list_[2])

print(grade(60,40,70))

#풀이1

def grade(*scores): #parameter(매개변수)를 여러 개 받을 수 있음(* : tuple)
    score_sum = 0
    score_list = []
    ac = " " #합격 여부

    for score in scores:
        if score < 40:
            ac = '불합격'
        score_sum += score

    score_avg = round(score_sum / len(scores), 2)

    if score_avg >= 60 and ac != '불합격':
        ac = '합격'
    else:
        ac = '합격'


    score_list.append(score_avg)
    score_list.append(scores)
    score_list.append(ac)

    return score_list

print(grade(60,40,70))

gr = (grade(100,50,70,80,30))

print(f'평균: {gr[0]} 과목당 점수: {gr[1]} 합격여부 : {gr[2]}')

#풀이2
def func_pf(*scores):
    score_sum = 0
    score_list = []
    ac = ''

    for score in scores:
        if score < 40:
            ac = '과락'
            break

        score_sum += score

    score_avg = round(score_sum / len(scores), 2)

    if ac == '과락':

        score_list.append(score_avg)
        score_list.append(scores)
        score_list.append(ac)




    else:
        if score_avg >= 60:
            ac = '합격'
        else:
            ac = '불합격'


        score_list.append(score_avg)
        score_list.append(scores)
        score_list.append(ac)




    return score_list

#입력받기

input_scores = []

for i in range(1,6):
    input_scores.append(int(input('점수를 입력하세요 : ')))

list_ = func_pf(*input_scores)

print('평균점수: %.2f'%list_[0])
print(f'과목점수: {list_[2]}')
print('합격여부: %s'%list_[1])

